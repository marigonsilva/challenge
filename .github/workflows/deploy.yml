name: 'Pipeline - Development - Deploy'

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  #GCLOUD_PROJECT: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: ${{ secrets.GAR_LOCATION }} # TODO: update region of the Artifact Registry
  GKE_CLUSTER:  ${{ secrets.GKE_CLUSTER }}    # TODO: update to cluster name
  GKE_ZONE:  ${{ secrets.GKE_ZONE }}   # TODO: update to cluster zone
  DEPLOYMENT_NAME: helloworld # TODO: update to deployment name
  REPOSITORY: "repo" # TODO: update to Artifact Registry docker repository 
  IMAGE: "helloworld:1.0.1"

on: workflow_dispatch
  #push:
  #  branches:
  #  - "main"
  #pull_request:

permissions:
  contents: read
  id-token: 'write'

jobs:
  deploy:
    name: 'Pipeline - Development - Deploy'
    runs-on: ubuntu-latest
    environment: development

    outputs:
      output1: ${{ steps.nginx.outputs.ip }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:

     - name: Checkout
       uses: actions/checkout@v3

     - id: 'auth'
       uses: 'google-github-actions/auth@v0'
       with:
         service_account: 'svc-challenge@challenge-01-367100.iam.gserviceaccount.com'
         credentials_json: ${{ secrets.GCLOUD_SVC_KEY }}

     - name: 'Set up Cloud SDK'
       uses: 'google-github-actions/setup-gcloud@v0'

     - name: 'Use gcloud CLI'
       run: |-
             gcloud info

     - name: 'Get GKE Credentials'
       run: |-
             gcloud container clusters get-credentials gke-dev-challenge --zone us-central1-a --project challenge-01-367100

     - name: Docker configuration
       run: |-
             echo ${{secrets.GCLOUD_ACCESS_TOKEN}}  | docker login -u oauth2accesstoken --password-stdin https://${{ env.GAR_LOCATION }}-docker.pkg.dev
     # Build the Docker image
     - name: Build
       run: |-
             docker build --no-cache \
             --tag "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}" \
             --build-arg GITHUB_SHA="$GITHUB_SHA" \
             --build-arg GITHUB_REF="$GITHUB_REF"  .

   # Push the Docker image to Google Artifact Registry
     - name: Publish
       run: |-
           docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}"

   # Set up kustomize
     - name: Set up Kustomize
       run: |-
             curl -v -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
             chmod u+x ./kustomize

   # Deploy the Docker image to the GKE cluster
     - name: Deploy
       run: |-
            # replacing the image name in the k8s template
            cd kubernetes
            ../kustomize edit set image helloworld=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}
            ../kustomize build . | kubectl apply -f -
            kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}
            kubectl get services -o wide
