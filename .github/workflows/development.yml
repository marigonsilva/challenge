
name: 'Pipeline - Development'

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: ${{ secrets.GAR_LOCATION }} # TODO: update region of the Artifact Registry
  GKE_CLUSTER:  ${{ secrets.GKE_CLUSTER }}    # TODO: update to cluster name
  GKE_ZONE:  ${{ secrets.GKE_ZONE }}   # TODO: update to cluster zone
  DEPLOYMENT_NAME: app # TODO: update to deployment name
  REPOSITORY: "repo" # TODO: update to Artifact Registry docker repository 
  IMAGE: app:1.0

on:
  push:
    branches:
    - "main"
  pull_request:

permissions:
  contents: read
  id-token: 'write'

jobs:
  terraform:
    name: 'Pipeline - Dev'
    runs-on: ubuntu-latest
    environment: development
    
    outputs:
      output1: ${{ steps.nginx.outputs.ip }}
      #output2: ${{ steps.step2.outputs.test }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        #workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
        service_account: 'svc-challenge@challenge-01-367100.iam.gserviceaccount.com'
        credentials_json: ${{ secrets.GCLOUD_SVC_KEY }}

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v0'

    - name: 'Use gcloud CLI'
      run: |-
            gcloud info

# Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd ./terraform && terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: cd ./terraform && terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd ./terraform && terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: cd ./terraform && terraform apply -auto-approve -input=false

 ############################################################################

    - name: Docker configuration
      run: |-
            echo ${{secrets.GCLOUD_ACCESS_TOKEN}}  | docker login -u oauth2accesstoken --password-stdin https://${{ env.GAR_LOCATION }}-docker.pkg.dev

# Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}"
    
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -v -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        chmod u+x ./kustomize
        
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        # replacing the image name in the k8s template
        cd kubernetes
        ../kustomize edit set image app=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}
        ../kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}
        kubectl get services -o wide
